name: Build and Deploy User Post

on:
  workflow_dispatch:
    inputs:
      postId:
        description: "User Post ID to build and deploy"
        required: true
      templateType:
        description: "Type of the template/project (e.g., react-vite, html, vanilla, react-tailwind-vite)"
        required: true
        default: "react-vite" # Default value if needed

jobs:
  build-and-upload:
    runs-on: ubuntu-latest
    env: # Set templateType as an environment variable for easy access in steps
      TEMPLATE_TYPE: ${{ github.event.inputs.templateType }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. Fetch user code from CodeUs! API
      - name: Fetch user code from API
        id: fetchCode
        run: |
          mkdir -p user-code
          echo "Fetching code for post ${{ github.event.inputs.postId }} (Type: ${{ env.TEMPLATE_TYPE }})..."
          curl -fL -H "Authorization: Bearer ${{ secrets.CI_TOKEN }}" \
               "https://${{ secrets.API_WORKER_URL }}/ci/builds/${{ github.event.inputs.postId }}/code" \
               -o user-code.tar.gz
          tar xzf user-code.tar.gz -C user-code
          echo "User code fetched into ./user-code directory."
          ls -R user-code

      # 2. Sanitize user code (Run for all types)
      - name: Sanitize user code
        id: sanitizeCode
        run: |
          echo "Sanitizing user code using scan-code.sh..."
          bash ./scripts/scan-code.sh ./user-code
          echo "Sanitization check complete."

      # --- Build-related steps (Conditional Execution) ---

      # 3. Merge template and user code (Only if build is needed)
      - name: Merge template and user code
        if: env.TEMPLATE_TYPE == 'react-vite' || env.TEMPLATE_TYPE == 'react-tailwind-vite' # Add other build-required types
        run: |
          echo "Merging template and user code using merge-template.sh..."
          bash ./scripts/merge-template.sh ${{ env.TEMPLATE_TYPE }} ./user-code ./build
          echo "Merge complete (Build required path)."

      - name: Setup Node.js with cache
        if: env.TEMPLATE_TYPE == 'react-vite' || env.TEMPLATE_TYPE == 'react-tailwind-vite'
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "build/package-lock.json"

      - name: Install dependencies
        if: env.TEMPLATE_TYPE == 'react-vite' || env.TEMPLATE_TYPE == 'react-tailwind-vite'
        working-directory: build
        run: npm ci --ignore-scripts

      - name: Install jq for JSON escaping
        # jq is used for API calls regardless of build type, so always install
        run: sudo apt-get update && sudo apt-get install -y jq

      # 4. Build project (Only if build is needed)
      - name: Build project
        id: buildStep
        if: env.TEMPLATE_TYPE == 'react-vite' || env.TEMPLATE_TYPE == 'react-tailwind-vite'
        working-directory: build
        run: npm run build > build_output.log 2>&1 || true # Capture output

      # --- Status Reporting and Size Check ---

      # 5. Mark build status API Call (Report 'skipped' if not applicable)
      - name: Mark build status
        id: markBuildStatus
        run: |
          STATUS="skipped" # Default for non-build types
          ERROR_MSG=""
          if [[ "${{ env.TEMPLATE_TYPE }}" == "react-vite" || "${{ env.TEMPLATE_TYPE }}" == "react-tailwind-vite" ]]; then
            if [[ "${{ steps.buildStep.outcome }}" == "success" ]]; then
              STATUS="success"
            else
              STATUS="error"
              ERROR_MSG=$(tail -n 50 $GITHUB_WORKSPACE/build/build_output.log || echo "Build log not available")
            fi
          fi
          JSON_PAYLOAD=$(jq -n --arg step "build" --arg status "$STATUS" --arg msg "$ERROR_MSG" \
            '{step: $step, status: $status, message: $msg}')
          echo "Reporting build status: $STATUS"
          # Allow skipping without failing the workflow if status is 'skipped'
          curl --fail -X POST "https://${{ secrets.API_WORKER_URL }}/ci/builds/${{ github.event.inputs.postId }}/status" \
            -H "Authorization: Bearer ${{ secrets.CI_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o api_response.txt \
            || { \
              echo "ERROR: Failed to report build status to API. Response:" >&2; \
              if [ -f api_response.txt ]; then cat api_response.txt >&2; else echo "(No response body file created or curl failed before writing)"; fi; \
              [[ "$STATUS" == "skipped" ]] || exit 1; \
            }

      # 6. Determine artifact source and check size
      # 6. Determine artifact source directory
      - name: Determine artifact source directory
        id: determineSource
        run: |
          SOURCE_DIR=""
          # Determine source directory based on template type
          if [[ "${{ env.TEMPLATE_TYPE }}" == "react-vite" || "${{ env.TEMPLATE_TYPE }}" == "react-tailwind-vite" ]]; then
            # Check build step outcome before proceeding for build types
            if [[ "${{ steps.buildStep.outcome }}" != "success" ]]; then
               echo "Build failed, cannot determine artifact source."
               echo "source_dir=error" >> $GITHUB_OUTPUT # Indicate error source
               exit 0 # Don't fail this step, let subsequent steps handle build failure
            fi
            SOURCE_DIR="./build/dist"
            echo "Artifact source for build type: $SOURCE_DIR"
          else
            SOURCE_DIR="./user-code" # For non-build types, check sanitized user code
            echo "Artifact source for non-build type: $SOURCE_DIR"
          fi
          echo "source_dir=$SOURCE_DIR" >> $GITHUB_OUTPUT # Output for later steps

      # 7. Check artifact size using script
      - name: Check artifact size
        id: checkSize
        # Run only if sanitize passed and source directory was determined (build didn't fail if required)
        if: ${{ steps.sanitizeCode.outcome == 'success' && steps.determineSource.outputs.source_dir != 'error' }}
        run: |
          MAX_SIZE_BYTES=8388608 # 8MB
          SOURCE_DIR="${{ steps.determineSource.outputs.source_dir }}"
          echo "Checking size for directory: $SOURCE_DIR"
          bash ./scripts/size-check.sh "$SOURCE_DIR" "$MAX_SIZE_BYTES" \
            || { \
              # Report size error to API
              ERROR_MSG=$(bash ./scripts/size-check.sh "$SOURCE_DIR" "$MAX_SIZE_BYTES" 2>&1 | tail -n 5); \
              JSON_PAYLOAD=$(jq -n --arg step "validation" --arg status "error" --arg msg "Artifact size error: $ERROR_MSG" \
                '{step: $step, status: $status, message: $msg}'); \
              echo "Reporting size error to API..."; \
              curl --fail -X POST "https://${{ secrets.API_WORKER_URL }}/ci/builds/${{ github.event.inputs.postId }}/status" \
                -H "Authorization: Bearer ${{ secrets.CI_TOKEN }}" \
                -H "Content-Type: application/json" \
                -d "$JSON_PAYLOAD" \
                -o api_response.txt \
                || { echo "WARN: Failed to report size error status to API. Response:" >&2; if [ -f api_response.txt ]; then cat api_response.txt >&2; else echo "(No response body file created or curl failed before writing)"; fi; }; \
              exit 1; \
            }

      # --- Artifact Creation and Upload ---

      # 7. Create ZIP artifact
      - name: Create ZIP artifact
        id: zipStep
        # Run only if sanitize passed, and (build passed or build skipped), and size check passed
        # Run only if sanitize passed, source determined, and size check passed
        if: ${{ steps.sanitizeCode.outcome == 'success' && steps.determineSource.outputs.source_dir != 'error' && steps.checkSize.outcome == 'success' }}
        run: |
          SOURCE_DIR="${{ steps.determineSource.outputs.source_dir }}"
          echo "Preparing artifact source directory: $SOURCE_DIR..."

          # --- Rename the first found HTML file to index.html for static types ---
          if [[ "${{ env.TEMPLATE_TYPE }}" == "html" || "${{ env.TEMPLATE_TYPE }}" == "vanilla" ]]; then
            # Find the first .html file (case-insensitive) in the source directory, excluding hidden files
            # Use find + head to get the first match reliably
            FIRST_HTML_FILE=$(find "$GITHUB_WORKSPACE/$SOURCE_DIR" -maxdepth 1 -type f -iname '*.html' -print -quit)

            if [ -n "$FIRST_HTML_FILE" ]; then
              # Extract just the filename
              FIRST_HTML_FILENAME=$(basename "$FIRST_HTML_FILE")
              if [[ "$FIRST_HTML_FILENAME" != "index.html" ]]; then
                echo "Renaming '$FIRST_HTML_FILENAME' to index.html for static type."
                mv "$FIRST_HTML_FILE" "$GITHUB_WORKSPACE/$SOURCE_DIR/index.html"
              else
                echo "index.html already exists."
              fi
            else
              echo "Warning: No .html file found in $SOURCE_DIR for static type."
              # Decide if this should be an error or just a warning
            fi
          fi
          # --- End rename ---

          echo "Creating zip artifact from $SOURCE_DIR..."
          # Use absolute path for cd to avoid issues
          # Ensure we are zipping the contents of the directory, not the directory itself
          cd "$GITHUB_WORKSPACE/$SOURCE_DIR" && zip -r "$GITHUB_WORKSPACE/artifact.zip" ./* && cd "$GITHUB_WORKSPACE"
          # Note: Using ./* ensures hidden files/dirs at the root are not included directly,
          # but zip -r should handle subdirectories correctly. If hidden files at root are needed, use '.' instead of './*'.
          echo "Zip artifact created at ./artifact.zip"
        shell: bash

      # 8. Upload artifact to Cloudflare KV
      - name: Upload artifact to Cloudflare KV
        id: uploadStep
        if: ${{ steps.zipStep.outcome == 'success' }} # Depends on successful zip creation
        run: |
          echo "Uploading artifact to KV..."
          npx wrangler kv key put builds/${{ github.event.inputs.postId }}.zip --binding CODEUS_BUILD_KV_DEV --path=./artifact.zip
          echo "Upload command executed."
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.ACCOUNT_ID }}

      # 9. Mark upload status API Call
      - name: Mark upload status
        # Run if zip creation was attempted (implies prior steps were ok)
        # Run if sanitize passed, source determined, and size check passed (implies zip was attempted)
        if: ${{ steps.sanitizeCode.outcome == 'success' && steps.determineSource.outputs.source_dir != 'error' && steps.checkSize.outcome == 'success' }}
        run: |
          UPLOAD_STATUS="error"
          UPLOAD_ERR_MSG="Upload failed."
          # Check the outcome of the upload command execution
          if [[ "${{ steps.uploadStep.outcome }}" == "success" ]]; then
            UPLOAD_STATUS="success"
            UPLOAD_ERR_MSG=""
          fi
          JSON_PAYLOAD=$(jq -n --arg step "upload" --arg status "$UPLOAD_STATUS" --arg msg "$UPLOAD_ERR_MSG" \
            '{step: $step, status: $status, message: $msg}')
          echo "Reporting upload status: $UPLOAD_STATUS"
          curl --fail -X POST "https://${{ secrets.API_WORKER_URL }}/ci/builds/${{ github.event.inputs.postId }}/status" \
            -H "Authorization: Bearer ${{ secrets.CI_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "$JSON_PAYLOAD" \
            -o api_response.txt \
            || { \
              echo "ERROR: Failed to report upload status to API. Response:" >&2; \
              if [ -f api_response.txt ]; then cat api_response.txt >&2; else echo "(No response body file created or curl failed before writing)"; fi; \
              exit 1; \
            }
